// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.fluxninja.aperture.policy.language.v1;

public interface RateLimiterOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.RateLimiter)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * &#64;gotags: validate:"required"
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter.Ins in_ports = 1[json_name = "inPorts", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the inPorts field is set.
   */
  boolean hasInPorts();
  /**
   * <pre>
   * &#64;gotags: validate:"required"
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter.Ins in_ports = 1[json_name = "inPorts", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The inPorts.
   */
  com.fluxninja.aperture.policy.language.v1.RateLimiter.Ins getInPorts();
  /**
   * <pre>
   * &#64;gotags: validate:"required"
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter.Ins in_ports = 1[json_name = "inPorts", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  com.fluxninja.aperture.policy.language.v1.RateLimiter.InsOrBuilder getInPortsOrBuilder();

  /**
   * <pre>
   * Which control point to apply this ratelimiter to.
   * </pre>
   *
   * <code>.aperture.common.selector.v1.Selector selector = 2[json_name = "selector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the selector field is set.
   */
  boolean hasSelector();
  /**
   * <pre>
   * Which control point to apply this ratelimiter to.
   * </pre>
   *
   * <code>.aperture.common.selector.v1.Selector selector = 2[json_name = "selector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The selector.
   */
  com.fluxninja.aperture.common.selector.v1.Selector getSelector();
  /**
   * <pre>
   * Which control point to apply this ratelimiter to.
   * </pre>
   *
   * <code>.aperture.common.selector.v1.Selector selector = 2[json_name = "selector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  com.fluxninja.aperture.common.selector.v1.SelectorOrBuilder getSelectorOrBuilder();

  /**
   * <pre>
   * Time after which the limit for a given label value will be reset.
   * </pre>
   *
   * <code>.google.protobuf.Duration limit_reset_interval = 3[json_name = "limitResetInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the limitResetInterval field is set.
   */
  boolean hasLimitResetInterval();
  /**
   * <pre>
   * Time after which the limit for a given label value will be reset.
   * </pre>
   *
   * <code>.google.protobuf.Duration limit_reset_interval = 3[json_name = "limitResetInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The limitResetInterval.
   */
  com.google.protobuf.Duration getLimitResetInterval();
  /**
   * <pre>
   * Time after which the limit for a given label value will be reset.
   * </pre>
   *
   * <code>.google.protobuf.Duration limit_reset_interval = 3[json_name = "limitResetInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getLimitResetIntervalOrBuilder();

  /**
   * <pre>
   * Specifies which label the ratelimiter should be keyed by.
   * Rate limiting is done independently for each value of the
   * [label](/concepts/flow-control/flow-label.md) with given key.
   * Eg., to give each user a separate limit, assuming you have a _user_ flow
   * label set up, set `label_key: "user"`.
   * </pre>
   *
   * <code>string label_key = 4[json_name = "labelKey", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The labelKey.
   */
  java.lang.String getLabelKey();
  /**
   * <pre>
   * Specifies which label the ratelimiter should be keyed by.
   * Rate limiting is done independently for each value of the
   * [label](/concepts/flow-control/flow-label.md) with given key.
   * Eg., to give each user a separate limit, assuming you have a _user_ flow
   * label set up, set `label_key: "user"`.
   * </pre>
   *
   * <code>string label_key = 4[json_name = "labelKey", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The bytes for labelKey.
   */
  com.google.protobuf.ByteString
      getLabelKeyBytes();

  /**
   * <pre>
   * Allows to specify different limits for particular label values.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.RateLimiter.Override overrides = 5[json_name = "overrides"];</code>
   */
  java.util.List<com.fluxninja.aperture.policy.language.v1.RateLimiter.Override>
      getOverridesList();
  /**
   * <pre>
   * Allows to specify different limits for particular label values.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.RateLimiter.Override overrides = 5[json_name = "overrides"];</code>
   */
  com.fluxninja.aperture.policy.language.v1.RateLimiter.Override getOverrides(int index);
  /**
   * <pre>
   * Allows to specify different limits for particular label values.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.RateLimiter.Override overrides = 5[json_name = "overrides"];</code>
   */
  int getOverridesCount();
  /**
   * <pre>
   * Allows to specify different limits for particular label values.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.RateLimiter.Override overrides = 5[json_name = "overrides"];</code>
   */
  java.util.List<? extends com.fluxninja.aperture.policy.language.v1.RateLimiter.OverrideOrBuilder>
      getOverridesOrBuilderList();
  /**
   * <pre>
   * Allows to specify different limits for particular label values.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.RateLimiter.Override overrides = 5[json_name = "overrides"];</code>
   */
  com.fluxninja.aperture.policy.language.v1.RateLimiter.OverrideOrBuilder getOverridesOrBuilder(
      int index);

  /**
   * <pre>
   * Configuration of lazy-syncing behaviour of ratelimiter
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter.LazySync lazy_sync = 6[json_name = "lazySync"];</code>
   * @return Whether the lazySync field is set.
   */
  boolean hasLazySync();
  /**
   * <pre>
   * Configuration of lazy-syncing behaviour of ratelimiter
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter.LazySync lazy_sync = 6[json_name = "lazySync"];</code>
   * @return The lazySync.
   */
  com.fluxninja.aperture.policy.language.v1.RateLimiter.LazySync getLazySync();
  /**
   * <pre>
   * Configuration of lazy-syncing behaviour of ratelimiter
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter.LazySync lazy_sync = 6[json_name = "lazySync"];</code>
   */
  com.fluxninja.aperture.policy.language.v1.RateLimiter.LazySyncOrBuilder getLazySyncOrBuilder();
}
